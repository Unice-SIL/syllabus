{% extends 'ajax.html.twig' %}

{% block main %}

    {% form_theme form with [
    'form/sections_field.html.twig',
    'form/activities_field.html.twig',
    'form/evaluations_field.html.twig',
    'form/choices_activities_field.html.twig'
    ] %}

    <h4>
        Sections et activités
        <span title="Tout replier."><i class="fas fa-folder secondary"></i></span>
        <span title="Tout déplier."><i class="fas fa-folder-open secondary"></i></span>
    </h4>

    {{ form_start(form) }}
    {{ form_errors(form.sections) }}
    {{ form_widget(form.sections) }}

    <div class="row mt-3 mb-5">
        <div class="col">
            <button type="button" id="addSectionButton"
                    class="btn btn-primary btn-block shadow">
                <i class="fas fa-plus-circle"></i>
                Ajouter une section
            </button>
        </div>
    </div>

    <hr>

    <div class="row mt-5">
        <div class="col container-evaluations">
            <div class="row">
                <div class="col">
                    <h4>Évaluation terminale</h4>
                </div>
            </div>
            <div class="row">
                <div class="col border ml-3 mr-3 p-1">
                    {{ form_widget(form.ctEvaluations) }}
                </div>
                <div class="col border mr-3 p-1">
                    {{ form_widget(form.evaluations) }}
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col">
            <button class="btn btn-outline-primary btn-block shadow submit" type="submit">
                <i class="fas fa-save"></i>
                Enregistrer
            </button>
        </div>
    </div>

    {{ form_end(form) }}

{% endblock %}

{% block javascripts %}
    <script>

        function setActivityInfos(el, data){
            el.find('.activity-label').html(data['label']);
            el.find('select[id$=_activity]').val(data['activity_id']);
            el.addClass(data['classtype']);
        }

        function setEvaluationInfos(el, data){
            el.find('.evaluation-label').html(data['label']);
            el.find('select[id$=_activity]').val(data['activity_id']);
            el.addClass(data['classtype']);
        }

        /**
         * Init activities elements
         */
        function initActivities(container){
            var activitiesClassList = container.find('.list-activities');
            var activitiesCollectionHolder = container.find('.activities');
            var groupName = activitiesCollectionHolder.attr('id');

            // Set data-index
            activitiesCollectionHolder.data('index', activitiesCollectionHolder.find('.activity').length);

            // Activities collection holder sortable
            activitiesCollectionHolder.sortable( {
                group: {
                    name: groupName
                },
                handle: ".activity-collection-move",
                sort: true,
                animation: 150,
                onAdd: function(e){
                    var item = $(e.item);
                    var form = Syllabus.addFormToCollection(activitiesCollectionHolder);
                    var label = item.find('input.activity-label').val();
                    var activity_id = item.find("input.activity-id").val();
                    var type = item.find("input.activity-type").val();
                    var mode = item.find("input.activity-mode").val();
                    var size = item.find("input.activity-grp").val();
                    var classtype = item.find("input.activity-class").val();
                    setActivityInfos(form, {
                        'label': label,
                        'activity_id': activity_id,
                        'type': type,
                        'mode': mode,
                        'size': size,
                        'classtype': classtype
                    });
                    form.find('i.fa-caret-down').attr('aria-expanded', 'true');
                    form.find('.collapse').addClass('show');
                    item.replaceWith(form);
                }
            } );

            // Activities lists sortable
            activitiesClassList.sortable( {
                group: {
                    name: groupName,
                    pull: 'clone',
                    put: false
                },
                sort: false,
                animation: 150
            } );

            // Remove an activity from collection
            activitiesCollectionHolder.on('click', '.activity-collection-remove', function(){
                Syllabus.temporaryItem = $(this).closest('.activity');
                bootbox.confirm("Confirmez-vous la suppression de cette activité ?", function(result){
                    if (result === true) {
                        Syllabus.removeListElement(Syllabus.temporaryItem);
                    }
                })
            });
        }

        /**
         * Init sections collection
         */
        var sectionsCollectionHolder = $('#sections'),
            collapsiblesShowState = {},
            sortingInProgress = false,
            $sortedItem = null,
            ckeInstance = null;
        sectionsCollectionHolder.data('index', sectionsCollectionHolder.find('li.section').length);
        sectionsCollectionHolder.sortable( {
            group: {
                name: "sections",
            },
            handle: ".section-collection-move",
            sort: true,
            animation: 150,
            onChoose: function( e ) {
                $( '#sections' ).find( '.section' ).each( function( ) {
                    $sortedItem = $( this ).find( '.collapse:not(.card-body)' );
                    if ( $sortedItem[ 0 ].classList.contains( 'show' ) ) {
                        collapsiblesShowState[ $sortedItem.attr( 'id' ) ] = true;
                    } else {
                        collapsiblesShowState[ $sortedItem.attr( 'id' ) ] = false;
                    }
                } );
                $sortedItem = $( e.item ).find( '.collapse:not(.card-body)' );
                $sortedItem.collapse( 'hide' );
            },
            onUnchoose: function( e ) {
                if ( ! sortingInProgress ) {
                    if ( collapsiblesShowState[ $sortedItem.attr( 'id' ) ] ) {
                        $( e.item ).find( '> row > col > .fa-caret-down' ).attr( 'aria-expanded', "true" );
                        $sortedItem.collapse( 'show' );
                    }
                    $sortedItem = null;
                }
            },
            onStart: function( e ) {
                sortingInProgress = true;
                ckeInstance = $( e.item ).find( '.cke' ).siblings( 'textarea' ).attr( 'id' );
                CKEDITOR.instances[ ckeInstance ].destroy( );
            },
            onEnd: function( e ) {
                if ( collapsiblesShowState[ $sortedItem.attr( 'id' ) ] ) {
                    $( e.item ).find( '> row > col > .fa-caret-down' ).attr( 'aria-expanded', "true" );
                    $sortedItem.collapse( 'show' );
                }
                $sortedItem = null;
                sortingInProgress = false;
            },
            onSort: function( ) {
                CKEDITOR.replace( ckeInstance, Syllabus.ckeConfig );
            }
        } );

        // Sections folding / unfolding command.
        var collapseState = '';
        $( '#panel_tab-2' ).on( 'click', 'h4 > span > .fas', function( e ) {
            if ( e.target.classList.contains( 'fa-folder-open' ) ) {
                collapseState = 'show';
            } else if ( e.target.classList.contains( 'fa-folder' ) ) {
                collapseState = 'hide';
            }
            $( '#sections' ).find( '.section' ).each( function( ) {
                $( this ).find( '.collapse:not(.card-body)' )
                        .collapse( collapseState );
            } );
            collapseState = '';
        } );

        /**
         * Add a section when button click
         */
        $('#addSectionButton').click(function(){
            var form = Syllabus.addFormToCollection(sectionsCollectionHolder);
            initActivities(form.find('.container-activities'));
            form.find('input[id$=_title]').focus();
        });

        /**
         * Remove a section from collection
         */
        sectionsCollectionHolder.on('click', '.section-collection-remove', function() {
            Syllabus.temporaryItem = $(this).closest('li.section');
            bootbox.confirm("Confirmez-vous la suppression de cette section ?", function(result){
                if (result === true) {
                    Syllabus.removeListElement(Syllabus.temporaryItem);
                }
            })
        });

        /**
         * Init evaluations collection
         */
        var evaluationsClassList = $('.list-ct-evaluations');
        var evaluationsCollectionHolder = $('#evaluations');
        evaluationsCollectionHolder.data('index', evaluationsCollectionHolder.find('.evaluation').length);

        // Evaluations collection holder sortable
        evaluationsCollectionHolder.sortable( {
            group: {
                name: "evaluations"
            },
            handle: ".evaluation-collection-move",
            sort: true,
            animation: 150,
            onAdd: function(e){
                var item = $(e.item);
                var form = Syllabus.addFormToCollection(evaluationsCollectionHolder);
                var label = item.find('input.activity-label').val();
                var activity_id = item.find("input.activity-id").val();
                var type = item.find("input.activity-type").val();
                var mode = item.find("input.activity-mode").val();
                var size = item.find("input.activity-grp").val();
                var classtype = item.find("input.activity-class").val();
                setEvaluationInfos(form, {
                    'label': label,
                    'activity_id': activity_id,
                    'type': type,
                    'mode': mode,
                    'size': size,
                    'classtype': classtype
                });
                item.replaceWith(form);
            }
        } );

        // Evaluations lists sortable
        evaluationsClassList.sortable( {
            group: {
                name: "evaluations",
                pull: 'clone',
                put: false
            },
            sort: false,
            animation: 150
        } );

        /**
         * Remove a evaluation from collection
         */
        evaluationsCollectionHolder.on('click', '.evaluation-collection-remove', function(){
            Syllabus.temporaryItem = $(this).closest('div.evaluation');
            bootbox.confirm("Confirmez-vous la suppression de cette évaluation ?", function(result){
                if (result === true) {
                    Syllabus.removeListElement(Syllabus.temporaryItem);
                }
            })
        });

        /**
         * Call initActivities function for all activities container
         */
        $('.container-activities').each(function(){
            initActivities($(this));
        });

        /**
         * Form submission
         */
        $("form[name='edit_activities_course_info']").submit(function(e){

            Syllabus.submitPanelForm( e, this );

        });

    </script>
{% endblock %}