{% extends 'ajax.html.twig' %}

{% block main %}

    {% form_theme form with [
    'form/sections_field.html.twig',
    'form/activities_field.html.twig',
    'form/evaluations_field.html.twig',
    'form/choices_activities_field.html.twig'
    ] %}


    {{ form_start(form) }}


    <div class="d-flex flex-row justify-content-between">
        <div>
            <h3>
                Sections et activités
                <img id="infos_sections" src="{{ asset('images/info_32.png') }}" style="cursor: pointer;">
                <span title="Tout replier."><i class="fas fa-folder secondary"></i></span>
                <span title="Tout déplier."><i class="fas fa-folder-open secondary"></i></span>
            </h3>
        </div>
        <div>
            <button class="btn btn-outline-primary submit" type="submit">
                <i class="fas fa-save"></i>
                Enregistrer
            </button>
        </div>
    </div>



    {{ form_errors(form.sections) }}
    {{ form_widget(form.sections) }}

    <div class="row mt-3 mb-5">
        <div class="col">
            <button type="button" id="addSectionButton"
                    class="btn btn-primary btn-block shadow">
                <i class="fas fa-plus-circle"></i>
                Ajouter une section
            </button>
        </div>
    </div>

    <hr>

    <h3>
        Évaluation terminale
        <img id="infos_evaluations" src="{{ asset('images/info_32.png') }}" style="cursor: pointer;">
    </h3>


    <div class="row">
        <div class="col border ml-3 mr-3 p-1">
            {{ form_widget(form.ctEvaluations) }}
        </div>
        <div class="col border mr-3 p-1">
            {{ form_widget(form.evaluations) }}
        </div>
    </div>

    <div class="row mt-3">
        <div class="col">
            <button class="btn btn-outline-primary btn-block shadow submit" type="submit">
                <i class="fas fa-save"></i>
                Enregistrer
            </button>
        </div>
    </div>

    {{ form_end(form) }}

{% endblock %}

{% block javascripts %}
    <script>

        function setActivityInfos(el, data){
            el.find('.activity-label').html(data['label']);
            el.find('select[id$=_activity]').val(data['activity_id']);
            el.addClass(data['classtype']);
        }

        function setEvaluationInfos(el, data){
            el.find('.evaluation-label').html(data['label']);
            el.find('select[id$=_activity]').val(data['activity_id']);
            el.addClass(data['classtype']);
        }

        /**
         * Init activities elements
         */
        function initActivities(container){
            var activitiesClassList = container.find('.list-activities');
            var activitiesCollectionHolder = container.find('.activities');
            var groupName = activitiesCollectionHolder.attr('id');

            // Set data-index
            activitiesCollectionHolder.data('index', activitiesCollectionHolder.find('.activity').length);

            // Activities collection holder sortable
            activitiesCollectionHolder.sortable( {
                group: {
                    name: groupName
                },
                handle: ".activity-collection-move",
                sort: true,
                animation: 150,
                onAdd: function(e){
                    var item = $(e.item);
                    var form = Syllabus.addFormToCollection(activitiesCollectionHolder, '__activity__');
                    var label = item.find('input.activity-label').val();
                    var activity_id = item.find("input.activity-id").val();
                    var type = item.find("input.activity-type").val();
                    var mode = item.find("input.activity-mode").val();
                    var size = item.find("input.activity-grp").val();
                    var classtype = item.find("input.activity-class").val();
                    setActivityInfos(form, {
                        'label': label,
                        'activity_id': activity_id,
                        'type': type,
                        'mode': mode,
                        'size': size,
                        'classtype': classtype
                    });
                    form.find('i.fa-caret-down').attr('aria-expanded', 'true');
                    form.find('.collapse').addClass('show');
                    item.replaceWith(form);
                }
            } );

            // Activities lists sortable
            activitiesClassList.sortable( {
                group: {
                    name: groupName,
                    pull: 'clone',
                    put: false
                },
                sort: false,
                animation: 150
            } );

            // Remove an activity from collection
            activitiesCollectionHolder.on('click', '.activity-collection-remove', function(){
                Syllabus.temporaryItem = $(this).closest('.activity');
                bootbox.confirm("Confirmez-vous la suppression de cette activité ?", function(result){
                    if (result === true) {
                        Syllabus.removeListElement(Syllabus.temporaryItem);
                    }
                })
            });
        }

        /**
         * Init sections collection
         */
        var sectionsCollectionHolder = $('#sections'),
            collapsiblesShowState = {},
            sortingInProgress = false,
            $sortedItem = null,
            ckeInstance = null;
        sectionsCollectionHolder.data('index', sectionsCollectionHolder.find('li.section').length);
        sectionsCollectionHolder.sortable( {
            group: {
                name: "sections",
            },
            handle: ".section-collection-move",
            sort: true,
            animation: 150,
            onChoose: function( e ) {
                $( '#sections' ).find( '.section' ).each( function( ) {
                    $sortedItem = $( this ).find( '.collapse:not(.card-body)' );
                    if ( $sortedItem[ 0 ].classList.contains( 'show' ) ) {
                        collapsiblesShowState[ $sortedItem.attr( 'id' ) ] = true;
                    } else {
                        collapsiblesShowState[ $sortedItem.attr( 'id' ) ] = false;
                    }
                } );
                $sortedItem = $( e.item ).find( '.collapse:not(.card-body)' );
                $sortedItem.collapse( 'hide' );
            },
            onUnchoose: function( e ) {
                if ( ! sortingInProgress ) {
                    if ( collapsiblesShowState[ $sortedItem.attr( 'id' ) ] ) {
                        $( e.item ).find( '> row > col > .fa-caret-down' ).attr( 'aria-expanded', "true" );
                        $sortedItem.collapse( 'show' );
                    }
                    $sortedItem = null;
                }
            },
            onStart: function( e ) {
                sortingInProgress = true;
                ckeInstance = $( e.item ).find( '.cke' ).siblings( 'textarea' ).attr( 'id' );
                CKEDITOR.instances[ ckeInstance ].destroy( );
            },
            onEnd: function( e ) {
                if ( collapsiblesShowState[ $sortedItem.attr( 'id' ) ] ) {
                    $( e.item ).find( '> row > col > .fa-caret-down' ).attr( 'aria-expanded', "true" );
                    $sortedItem.collapse( 'show' );
                }
                $sortedItem = null;
                sortingInProgress = false;
            },
            onSort: function( ) {
                CKEDITOR.replace( ckeInstance, Syllabus.ckeConfig );
            }
        } );

        // Sections folding / unfolding command.
        var collapseState = '';
        $( '#panel_tab-2' ).on( 'click', 'h3 > span > .fas', function( e ) {
            if ( e.target.classList.contains( 'fa-folder-open' ) ) {
                collapseState = 'show';
            } else if ( e.target.classList.contains( 'fa-folder' ) ) {
                collapseState = 'hide';
            }
            $( '#sections' ).find( '.section' ).each( function( ) {
                $( this ).find( '.collapse:not(.card-body)' )
                        .collapse( collapseState );
            } );
            collapseState = '';
        } );

        /**
         * Add a section when button click
         */
        $('#addSectionButton').click(function(){
            var form = Syllabus.addFormToCollection(sectionsCollectionHolder, '__section__');
            initActivities(form.find('.container-activities'));
            form.find('input[id$=_title]').focus();
        });

        /**
         * Remove a section from collection
         */
        sectionsCollectionHolder.on('click', '.section-collection-remove', function() {
            Syllabus.temporaryItem = $(this).closest('li.section');
            bootbox.confirm("Confirmez-vous la suppression de cette section ?", function(result){
                if (result === true) {
                    Syllabus.removeListElement(Syllabus.temporaryItem);
                }
            })
        });

        /**
         * Init evaluations collection
         */
        var evaluationsClassList = $('.list-ct-evaluations');
        var evaluationsCollectionHolder = $('#evaluations');
        evaluationsCollectionHolder.data('index', evaluationsCollectionHolder.find('.evaluation').length);

        // Evaluations collection holder sortable
        evaluationsCollectionHolder.sortable( {
            group: {
                name: "evaluations"
            },
            handle: ".evaluation-collection-move",
            sort: true,
            animation: 150,
            onAdd: function(e){
                var item = $(e.item);
                var form = Syllabus.addFormToCollection(evaluationsCollectionHolder, '__activity__');
                var label = item.find('input.activity-label').val();
                var activity_id = item.find("input.activity-id").val();
                var type = item.find("input.activity-type").val();
                var mode = item.find("input.activity-mode").val();
                var size = item.find("input.activity-grp").val();
                var classtype = item.find("input.activity-class").val();
                setEvaluationInfos(form, {
                    'label': label,
                    'activity_id': activity_id,
                    'type': type,
                    'mode': mode,
                    'size': size,
                    'classtype': classtype
                });
                item.replaceWith(form);
            }
        } );

        // Evaluations lists sortable
        evaluationsClassList.sortable( {
            group: {
                name: "evaluations",
                pull: 'clone',
                put: false
            },
            sort: false,
            animation: 150
        } );

        /**
         * Remove a evaluation from collection
         */
        evaluationsCollectionHolder.on('click', '.evaluation-collection-remove', function(){
            Syllabus.temporaryItem = $(this).closest('div.evaluation');
            bootbox.confirm("Confirmez-vous la suppression de cette évaluation ?", function(result){
                if (result === true) {
                    Syllabus.removeListElement(Syllabus.temporaryItem);
                }
            })
        });

        /**
         * Call initActivities function for all activities container
         */
        $('.container-activities').each(function(){
            initActivities($(this));
        });

        /**
         * Form submission
         */
        $("form[name='edit_activities_course_info']").submit(function(e){
            Syllabus.submitPanelForm( e, this );
        });

        $('#infos_sections').click(function(){
            var message = '<p>Pour remplir cette partie, suivez les étapes suivantes :</p>' +
                '<ol>' +
                '<li>' +
                'Choisissez vos titres de section pour organiser votre cours comme vous le souhaitez (ex: par chapitre, par thème, par partie, par enseignant, ...). Vous pouvez également nommer différemment plusieurs sections (ex: Chapitre 1, Chapitre 2, Chapitre 3, Evaluation de mi-session, Chapitre 4, Chapitre 5, Evaluation Terminale).' +
                '</li>' +
                '<li>' +
                'Utilisez ensuite la fonctionnalité "dérouler" à gauche du titre de votre section en cliquant sur le symbole <i class="fas fa-caret-right"></i> (vous pouvez également utiliser l\'icône "Tout déplier" <i class="fas fa-folder-open secondary"></i> qui se trouve en haut à droite de la liste des sections afin de déplier d\'un seul coup toutes les sections)' +
                '</li>' +
                '<li>' +
                'Décrivez le contenu de ce qui est abordé dans cette section (notions de cours, plan, ...).' +
                '</li>' +
                '<li>' +
                '<p>Sélectionnez ensuite toutes les activités que vous allez mettre en place avec vos étudiants pour les faire étudier de manière la plus active et participative possible. Par exemple pour le chapitre 1, les étudiants travailleront sur le livre X écrit par l\'auteur Y, ils auront donc une "étude de document" à faire en autonomie (qui correspond à la lecture du livre en question) puis l\'enseignant fera en classe une "étude de cas" et animera une "discussion/réflexion" autour de ce livre, en plus du traditionnel "cours magistral" en présentiel.</p>' +
                '<p>Il est également possible d\'ajouter une ou plusieurs évaluation(s) en Contrôle Continu ou bien un Contrôle Terminal (tout en bas de la page).</p>' +
                '<p>Pour chaque activité ou évaluation choisie, vous avez la possibilité de donner plus de détails à votre étudiant en remplissant la case "préciser".</p>' +
                '</li>' +
                '</ol>';
            bootbox.dialog({
                message: message,
                backdrop: true,
                onEscape: true
            });
        });

        $('#infos_evaluations').click(function(){
            var message = '<p>Dans le cas d\'évaluations différentes selon les enseignants, vous pouvez renseigner le nom de l\'enseignant correspondant au type d’évaluation choisie, dans la case "Préciser".</p>' +
                '<p>Exemple :</p>' +
                '<ul>' +
                '<li>' +
                'Production écrite : Madame X (dissertation)' +
                '</li>' +
                '<li>' +
                'Production orale : Monsieur Y (argumentaire)' +
                '</li>' +
                '<li>' +
                'Test standardisé : Madame Z (QCM + questions de cours)' +
                '</li>' +
                '</ul>';
            bootbox.dialog({
                message: message,
                backdrop: true,
                onEscape: true
            });
        });

    </script>
{% endblock %}